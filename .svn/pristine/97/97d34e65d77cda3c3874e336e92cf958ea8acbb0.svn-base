package com.frxs.check;

import android.Manifest;
import android.annotation.TargetApi;
import android.content.pm.PackageManager;
import android.os.Build;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import com.ewu.core.base.BaseActivity;
import com.ewu.core.utils.EasyPermissionsEx;
import com.ewu.core.utils.SharedPreferencesHelper;
import com.frxs.check.application.FrxsApplication;
import com.frxs.check.comms.Config;
import com.frxs.check.rest.service.ApiService;
import com.frxs.check.utils.DateUtil;
import com.readystatesoftware.systembartint.SystemBarTintManager;
import com.umeng.analytics.MobclickAgent;
import java.util.Date;

/**
 * Created by ewu on 2016/3/24.
 */
public abstract class FrxsActivity extends BaseActivity {

    protected ApiService mService;

    /** 广播action */
    public static final String SYSTEM_EXIT = "com.frxs.check.system_exit";

    private static final int MY_PERMISSIONS_REQUEST_WES = 4;// 请求文件存储权限的标识码

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        if (!(this instanceof SplashActivity) && !(this instanceof BaseDialogActivity)) {
            // 判断当前用户是否允许此权限
            if (EasyPermissionsEx.hasPermissions(this, new String[] {Manifest.permission.WRITE_EXTERNAL_STORAGE})) {
                // 允许 - 执行更新方法
                if (FrxsApplication.getInstance().isNeedCheckUpgrade()) {
                    FrxsApplication.getInstance().prepare4Update(this, false);
                }
            } else {
                // 不允许 - 弹窗提示用户是否允许放开权限
                EasyPermissionsEx.executePermissionsRequest(this, new String[] {Manifest.permission.WRITE_EXTERNAL_STORAGE}, MY_PERMISSIONS_REQUEST_WES);
            }
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
                setTranslucentStatus(true);
            }

            SystemBarTintManager tintManager = new SystemBarTintManager(this);
            tintManager.setStatusBarTintEnabled(true);
            tintManager.setStatusBarTintResource(R.color.frxs_red);
        }
    }

    @TargetApi(19)
    private void setTranslucentStatus(boolean on) {
        Window win = getWindow();
        WindowManager.LayoutParams winParams = win.getAttributes();
        final int bits = WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS;
        if (on) {
            winParams.flags |= bits;
        } else {
            winParams.flags &= ~bits;
        }
        win.setAttributes(winParams);
    }

    public ApiService getService()
    {
        //每次请求前需要检测版本号
        checkVersion();

        return FrxsApplication.getRestClient(Config.TYPE_BASE).getApiService();
    }

    private void checkVersion() {
        SharedPreferencesHelper helper = SharedPreferencesHelper.getInstance(this, Config.PREFS_NAME);
        String localYMD = helper.getString(Config.KEY_CHECK_DATE, "");
        String strYMD = DateUtil.Date2StringYMD(new Date());
        //当且仅当每日的首次请求时需要检测版本号
        if (!strYMD.equals(localYMD)) {
            FrxsApplication.getInstance().prepare4Update(this,false);
        }
    }

    protected abstract int getLayoutId();
    protected abstract void initViews();
    protected abstract void initData();
    protected abstract void initEvent();

    public void onBack(View view){
        finish();
    }

    @Override
    protected void onResume() {
        super.onResume();
        MobclickAgent.onResume(this);
    }

    @Override
    protected void onPause() {
        super.onPause();
        MobclickAgent.onPause(this);
    }


    @Override
    public void showProgressDialog() {
        super.showProgressDialog();
    }

    @Override
    public void dismissProgressDialog() {
        super.dismissProgressDialog();
    }

    /**
     * 请求用户是否放开权限的回调
     *
     * @param requestCode
     * @param permissions
     * @param grantResults
     */
    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        switch (requestCode) {
            case MY_PERMISSIONS_REQUEST_WES: {
                if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                    // 已获取权限 继续运行应用
                    if (FrxsApplication.getInstance().isNeedCheckUpgrade()) {
                        FrxsApplication.getInstance().prepare4Update(this, false);
                    }
                } else {
                    // 不允许放开权限后，提示用户可在去设置中跳转应用设置页面放开权限。
                    if (!EasyPermissionsEx.somePermissionPermanentlyDenied(this, new String[] {Manifest.permission.WRITE_EXTERNAL_STORAGE})) {
                        EasyPermissionsEx.goSettings2PermissionsDialog(this, "需要文件存储权限来下载更新的内容,但是该权限被禁止,你可以到设置中更改");
                    }
                }
                break;
            }
        }
    }
}
