package com.frxs.check.application;

import android.app.Activity;
import android.app.Application;
import android.app.Dialog;
import android.text.TextUtils;
import android.util.SparseArray;
import android.view.View;
import android.widget.TextView;
import com.ewu.core.utils.SerializableUtil;
import com.ewu.core.utils.SharedPreferencesHelper;
import com.ewu.core.utils.SystemUtils;
import com.ewu.core.utils.ToastUtils;
import com.frxs.check.HomeActivity;
import com.frxs.check.R;
import com.frxs.check.comms.Config;
import com.frxs.check.comms.GlobelDefines;
import com.frxs.check.greendao.utils.DbCore;
import com.frxs.check.model.AppVersionGetRespData;
import com.frxs.check.model.UserInfo;
import com.frxs.check.rest.RestClient;
import com.frxs.check.rest.model.AjaxParams;
import com.frxs.check.rest.model.ApiResponse;
import com.frxs.check.rest.service.SimpleCallback;
import com.frxs.check.service.apkUpdate.DownloadService;
import com.frxs.check.utils.DateUtil;
import java.io.IOException;
import java.util.Date;
import retrofit2.Call;

/**
 * Created by ewu on 2016/2/18.
 */
public class FrxsApplication extends Application {
    private static FrxsApplication mInstance;
    private UserInfo mUserInfo;// 用户信息

    private HomeActivity homeActivity;

    private boolean needCheckUpgrade = true; // 是否需要检测更新

    private static SparseArray<RestClient> restClientSparseArray = new SparseArray<RestClient>();

    public static FrxsApplication getInstance()
    {
        if (mInstance == null)
        {
            throw new IllegalStateException("Not yet initialized");
        }

        return mInstance;
    }

    @Override
    public void onCreate() {
        super.onCreate();

        if (mInstance != null)
        {
            throw new IllegalStateException("Not a singleton");
        }

        mInstance = this;

        DbCore.init(this);

        initData();

        initRestClient();
    }

    private void initRestClient() {
        restClientSparseArray.put(Config.TYPE_BASE, new RestClient(Config.getBaseUrl(Config.TYPE_BASE, getEnvironment())));
        restClientSparseArray.put(Config.TYPE_UPDATE, new RestClient(Config.getBaseUrl(Config.TYPE_UPDATE, getEnvironment())));
    }

    public static RestClient getRestClient(int clientType) {
        return restClientSparseArray.get(clientType);
    }

    private void initData()
    {
        // Get the user Info
        SharedPreferencesHelper helper = SharedPreferencesHelper.getInstance(this, Config.PREFS_NAME);
        String userStr = helper.getString(Config.KEY_USER, "");
        if (!TextUtils.isEmpty(userStr))
        {
            Object object = null;
            try
            {
                object = SerializableUtil.str2Obj(userStr);
                if (null != object)
                {
                    mUserInfo = (UserInfo) object;
                }

            } catch (IOException e)
            {
                e.printStackTrace();
            }

        }
    }

    public void setUserInfo(UserInfo userInfo)
    {
        this.mUserInfo = userInfo;

        String userStr = "";
        try
        {
            userStr = SerializableUtil.obj2Str(userInfo);
        } catch (IOException e)
        {
            e.printStackTrace();
        }
        SharedPreferencesHelper helper = SharedPreferencesHelper.getInstance(this, Config.PREFS_NAME);
        helper.putValue(Config.KEY_USER, userStr);
    }

    public UserInfo getUserInfo()
    {
        if (null == mUserInfo)
        {
            initData();
        }

        return mUserInfo;
    }

    public int getEnvironment() {
        SharedPreferencesHelper helper = SharedPreferencesHelper.getInstance(this, GlobelDefines.PREFS_NAME);
        return helper.getInt(GlobelDefines.KEY_ENVIRONMENT, Config.networkEnv);
    }

    public void setEnvironment(int environmentId) {
        SharedPreferencesHelper helper = SharedPreferencesHelper.getInstance(this, GlobelDefines.PREFS_NAME);
        helper.putValue(GlobelDefines.KEY_ENVIRONMENT, environmentId);

        restClientSparseArray.clear();
        restClientSparseArray.put(Config.TYPE_BASE, new RestClient(Config.getBaseUrl(Config.TYPE_BASE, environmentId)));
        restClientSparseArray.put(Config.TYPE_UPDATE, new RestClient(Config.getBaseUrl(Config.TYPE_UPDATE, environmentId)));
    }

    public String getUserAccount() {
        SharedPreferencesHelper helper = SharedPreferencesHelper.getInstance(this, GlobelDefines.PREFS_NAME);
        return helper.getString(GlobelDefines.KEY_FIRST_ENTER, "");
    }

    public void setUserAccount(String userAccount) {
        SharedPreferencesHelper helper = SharedPreferencesHelper.getInstance(this, GlobelDefines.PREFS_NAME);
        helper.putValue(GlobelDefines.KEY_FIRST_ENTER, userAccount);
    }

    /**
     * 更新版本的网路请求
     * @param activity
     * @param isShow 是否需要提示用户
     */
    public void prepare4Update(final Activity activity, final boolean isShow) {
        String strYMD = DateUtil.Date2StringYMD(new Date());
        SharedPreferencesHelper helper = SharedPreferencesHelper.getInstance(this, Config.PREFS_NAME);
        helper.putValue(Config.KEY_CHECK_DATE, strYMD);

        AjaxParams params = new AjaxParams();
//        params.put("Sign", MD5.ToMD5("GetAppVersion"));
        params.put("SysType", "0"); // 0:android;1:ios
        params.put("AppType", "3"); // 软件类型(0:订货平台;1:拣货APP;2:配送APP;3:装箱APP;4:采购APP)
        RestClient updateClient = getRestClient(Config.TYPE_UPDATE);
        updateClient.getApiService().PostAppVersion(params.getUrlParams()).enqueue(new SimpleCallback<ApiResponse<AppVersionGetRespData>>() {
            @Override
            public void onResponse(ApiResponse<AppVersionGetRespData> result, int code, String msg) {
                if (result.getFlag().equals("0")) {
                    AppVersionGetRespData respData = result.getData();
                    if (null != respData) {
                        int versionCode = Integer.valueOf(SystemUtils.getVersionCode(getApplicationContext()));

                        String curVersion = respData.getCurVersion();
                        int curCode = respData.getCurCode();

                        if (versionCode < curCode) {
                            int updateFlag = respData.getUpdateFlag();
                            String updateRemark = respData.getUpdateRemark();
                            String downloadUrl = respData.getDownUrl();
                            switch (updateFlag) {
                                case 0: // 0:不需要
                                    break;
                                case 1: // 1:建议升级
                                    showUpdateDialog(activity, false, downloadUrl, curVersion, updateRemark);
                                    break;
                                case 2: // 2：强制升级
                                    showUpdateDialog(activity, true, downloadUrl, curVersion, updateRemark);
                                    break;
                                default:
                                    break;
                            }
                        } else {
//                            ToastUtils.show(activity, "没有发现更新");
                        }
                    } else {
                        // 在每次登陆页面检测是否需要更新，如果没有发现新版本则不需要提示
                        if (isShow) {
                            ToastUtils.show(activity, "没有发现更新");
                        }
                    }
                } else {
                    ToastUtils.show(activity, result.getInfo());
                }
            }

            @Override
            public void onFailure(Call<ApiResponse<AppVersionGetRespData>> call, Throwable t) {
                super.onFailure(call, t);
            }
        });
    }

    public void exitApp(int code)
    {
        System.exit(code);
    }

    /**
     * 弹出更新的dialog
     * @param activity
     * @param isForceUpdate
     * @param downloadUrl
     * @param curVersion
     * @param updateRemark
     * @description
     */
    private void showUpdateDialog(final Activity activity, final boolean isForceUpdate,
                                  final String downloadUrl, String curVersion, String updateRemark) {
        final Dialog updateDialog = new Dialog(activity, android.R.style.Theme_Translucent_NoTitleBar);
        updateDialog.setContentView(R.layout.dialog_update);// 自定义对话框
        TextView tvContent = (TextView) updateDialog.findViewById(R.id.update_content);// 更新内容
        tvContent.setText(String.format(activity.getResources().getString(R.string.updade_content), curVersion,
                updateRemark));
        updateDialog.setCanceledOnTouchOutside(false);// 对话框外点击无效

        // 立即更新
        updateDialog.findViewById(R.id.update_id_ok).setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View view) {
                updateDialog.dismiss();
//                UpdateService updateService = new UpdateService(activity, downloadUrl, "", isForceUpdate);
//                updateService.downFile();

                DownloadService downLoadService = new DownloadService(activity, downloadUrl, isForceUpdate);
                downLoadService.execute();
                if (!isForceUpdate) {
                    ToastUtils.showShortToast(activity, "程序在后台下载，请稍等...");
                }
            }
        });

        // 强制更新
        if (isForceUpdate) {
            updateDialog.findViewById(R.id.update_id_cancel).setOnClickListener(new View.OnClickListener() {

                @Override
                public void onClick(View arg0) {
                    updateDialog.dismiss();
                    activity.finish();
                    FrxsApplication.getInstance().exitApp(0);
                }
            });
            updateDialog.setCancelable(false);
        } else {
            updateDialog.findViewById(R.id.update_id_cancel).setOnClickListener(new View.OnClickListener() {

                @Override
                public void onClick(View arg0) {
                    updateDialog.dismiss();
                }
            });
        }
        updateDialog.show();
    }

    public void exitApp() {
        needCheckUpgrade = true;
        System.exit(0);
    }

    public boolean isNeedCheckUpgrade() {
        return needCheckUpgrade;
    }

    public void setEnv(int environmentId)
    {
        SharedPreferencesHelper helper = SharedPreferencesHelper.getInstance(this, GlobelDefines.PREFS_NAME);
        helper.putValue(GlobelDefines.KEY_ENVIRONMENT, environmentId);
    }

    public int getEnv()
    {
        SharedPreferencesHelper helper = SharedPreferencesHelper.getInstance(this, GlobelDefines.PREFS_NAME);
        return helper.getInt(GlobelDefines.KEY_ENVIRONMENT, Config.networkEnv);
    }

    public HomeActivity getHomeActivity() {
        return homeActivity;
    }

    public void setHomeActivity(HomeActivity homeActivity) {
        this.homeActivity = homeActivity;
    }

    /**
     * 退出登录
     * 在这里做，如：清空用户信息，禁止接收消息之类的操作
     */
    public void logout() {
        // 清空用户信息
        setUserInfo(null);
    }
}
