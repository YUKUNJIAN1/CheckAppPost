package com.frxs.check.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.frxs.check.greendao.entity.ProductEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRODUCT_ENTITY".
*/
public class ProductEntityDao extends AbstractDao<ProductEntity, String> {

    public static final String TABLENAME = "PRODUCT_ENTITY";

    /**
     * Properties of entity ProductEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, String.class, "ID", true, "ID");
        public final static Property OrderId = new Property(1, String.class, "OrderId", false, "ORDER_ID");
        public final static Property ProductId = new Property(2, String.class, "ProductId", false, "PRODUCT_ID");
        public final static Property ProductName = new Property(3, String.class, "ProductName", false, "PRODUCT_NAME");
        public final static Property ShelfAreaID = new Property(4, String.class, "ShelfAreaID", false, "SHELF_AREA_ID");
        public final static Property ShelfAreaName = new Property(5, String.class, "ShelfAreaName", false, "SHELF_AREA_NAME");
        public final static Property BarCode = new Property(6, String.class, "BarCode", false, "BAR_CODE");
        public final static Property SKU = new Property(7, String.class, "SKU", false, "SKU");
        public final static Property SaleQty = new Property(8, double.class, "SaleQty", false, "SALE_QTY");
        public final static Property SaleUnit = new Property(9, String.class, "SaleUnit", false, "SALE_UNIT");
        public final static Property SalePrice = new Property(10, double.class, "SalePrice", false, "SALE_PRICE");
        public final static Property IsGift = new Property(11, int.class, "IsGift", false, "IS_GIFT");
        public final static Property SalePackingQty = new Property(12, double.class, "SalePackingQty", false, "SALE_PACKING_QTY");
        public final static Property PickUserId = new Property(13, int.class, "PickUserId", false, "PICK_USER_ID");
        public final static Property PickUserName = new Property(14, String.class, "PickUserName", false, "PICK_USER_NAME");
        public final static Property Remark = new Property(15, String.class, "Remark", false, "REMARK");
        public final static Property ShelfCode = new Property(16, String.class, "ShelfCode", false, "SHELF_CODE");
        public final static Property IsChecked = new Property(17, boolean.class, "isChecked", false, "IS_CHECKED");
        public final static Property PickedQty = new Property(18, double.class, "pickedQty", false, "PICKED_QTY");
        public final static Property PreQty = new Property(19, double.class, "PreQty", false, "PRE_QTY");
        public final static Property PickEndTime = new Property(20, String.class, "PickEndTime", false, "PICK_END_TIME");
        public final static Property AreaCheckTime = new Property(21, String.class, "AreaCheckTime", false, "AREA_CHECK_TIME");
        public final static Property ShelfAreaCategoryName = new Property(22, String.class, "ShelfAreaCategoryName", false, "SHELF_AREA_CATEGORY_NAME");
    }


    public ProductEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ProductEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRODUCT_ENTITY\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: ID
                "\"ORDER_ID\" TEXT," + // 1: OrderId
                "\"PRODUCT_ID\" TEXT," + // 2: ProductId
                "\"PRODUCT_NAME\" TEXT," + // 3: ProductName
                "\"SHELF_AREA_ID\" TEXT," + // 4: ShelfAreaID
                "\"SHELF_AREA_NAME\" TEXT," + // 5: ShelfAreaName
                "\"BAR_CODE\" TEXT," + // 6: BarCode
                "\"SKU\" TEXT," + // 7: SKU
                "\"SALE_QTY\" REAL NOT NULL ," + // 8: SaleQty
                "\"SALE_UNIT\" TEXT," + // 9: SaleUnit
                "\"SALE_PRICE\" REAL NOT NULL ," + // 10: SalePrice
                "\"IS_GIFT\" INTEGER NOT NULL ," + // 11: IsGift
                "\"SALE_PACKING_QTY\" REAL NOT NULL ," + // 12: SalePackingQty
                "\"PICK_USER_ID\" INTEGER NOT NULL ," + // 13: PickUserId
                "\"PICK_USER_NAME\" TEXT," + // 14: PickUserName
                "\"REMARK\" TEXT," + // 15: Remark
                "\"SHELF_CODE\" TEXT," + // 16: ShelfCode
                "\"IS_CHECKED\" INTEGER NOT NULL ," + // 17: isChecked
                "\"PICKED_QTY\" REAL NOT NULL ," + // 18: pickedQty
                "\"PRE_QTY\" REAL NOT NULL ," + // 19: PreQty
                "\"PICK_END_TIME\" TEXT," + // 20: PickEndTime
                "\"AREA_CHECK_TIME\" TEXT," + // 21: AreaCheckTime
                "\"SHELF_AREA_CATEGORY_NAME\" TEXT);"); // 22: ShelfAreaCategoryName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRODUCT_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ProductEntity entity) {
        stmt.clearBindings();
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(1, ID);
        }
 
        String OrderId = entity.getOrderId();
        if (OrderId != null) {
            stmt.bindString(2, OrderId);
        }
 
        String ProductId = entity.getProductId();
        if (ProductId != null) {
            stmt.bindString(3, ProductId);
        }
 
        String ProductName = entity.getProductName();
        if (ProductName != null) {
            stmt.bindString(4, ProductName);
        }
 
        String ShelfAreaID = entity.getShelfAreaID();
        if (ShelfAreaID != null) {
            stmt.bindString(5, ShelfAreaID);
        }
 
        String ShelfAreaName = entity.getShelfAreaName();
        if (ShelfAreaName != null) {
            stmt.bindString(6, ShelfAreaName);
        }
 
        String BarCode = entity.getBarCode();
        if (BarCode != null) {
            stmt.bindString(7, BarCode);
        }
 
        String SKU = entity.getSKU();
        if (SKU != null) {
            stmt.bindString(8, SKU);
        }
        stmt.bindDouble(9, entity.getSaleQty());
 
        String SaleUnit = entity.getSaleUnit();
        if (SaleUnit != null) {
            stmt.bindString(10, SaleUnit);
        }
        stmt.bindDouble(11, entity.getSalePrice());
        stmt.bindLong(12, entity.getIsGift());
        stmt.bindDouble(13, entity.getSalePackingQty());
        stmt.bindLong(14, entity.getPickUserId());
 
        String PickUserName = entity.getPickUserName();
        if (PickUserName != null) {
            stmt.bindString(15, PickUserName);
        }
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(16, Remark);
        }
 
        String ShelfCode = entity.getShelfCode();
        if (ShelfCode != null) {
            stmt.bindString(17, ShelfCode);
        }
        stmt.bindLong(18, entity.getIsChecked() ? 1L: 0L);
        stmt.bindDouble(19, entity.getPickedQty());
        stmt.bindDouble(20, entity.getPreQty());
 
        String PickEndTime = entity.getPickEndTime();
        if (PickEndTime != null) {
            stmt.bindString(21, PickEndTime);
        }
 
        String AreaCheckTime = entity.getAreaCheckTime();
        if (AreaCheckTime != null) {
            stmt.bindString(22, AreaCheckTime);
        }
 
        String ShelfAreaCategoryName = entity.getShelfAreaCategoryName();
        if (ShelfAreaCategoryName != null) {
            stmt.bindString(23, ShelfAreaCategoryName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ProductEntity entity) {
        stmt.clearBindings();
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(1, ID);
        }
 
        String OrderId = entity.getOrderId();
        if (OrderId != null) {
            stmt.bindString(2, OrderId);
        }
 
        String ProductId = entity.getProductId();
        if (ProductId != null) {
            stmt.bindString(3, ProductId);
        }
 
        String ProductName = entity.getProductName();
        if (ProductName != null) {
            stmt.bindString(4, ProductName);
        }
 
        String ShelfAreaID = entity.getShelfAreaID();
        if (ShelfAreaID != null) {
            stmt.bindString(5, ShelfAreaID);
        }
 
        String ShelfAreaName = entity.getShelfAreaName();
        if (ShelfAreaName != null) {
            stmt.bindString(6, ShelfAreaName);
        }
 
        String BarCode = entity.getBarCode();
        if (BarCode != null) {
            stmt.bindString(7, BarCode);
        }
 
        String SKU = entity.getSKU();
        if (SKU != null) {
            stmt.bindString(8, SKU);
        }
        stmt.bindDouble(9, entity.getSaleQty());
 
        String SaleUnit = entity.getSaleUnit();
        if (SaleUnit != null) {
            stmt.bindString(10, SaleUnit);
        }
        stmt.bindDouble(11, entity.getSalePrice());
        stmt.bindLong(12, entity.getIsGift());
        stmt.bindDouble(13, entity.getSalePackingQty());
        stmt.bindLong(14, entity.getPickUserId());
 
        String PickUserName = entity.getPickUserName();
        if (PickUserName != null) {
            stmt.bindString(15, PickUserName);
        }
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(16, Remark);
        }
 
        String ShelfCode = entity.getShelfCode();
        if (ShelfCode != null) {
            stmt.bindString(17, ShelfCode);
        }
        stmt.bindLong(18, entity.getIsChecked() ? 1L: 0L);
        stmt.bindDouble(19, entity.getPickedQty());
        stmt.bindDouble(20, entity.getPreQty());
 
        String PickEndTime = entity.getPickEndTime();
        if (PickEndTime != null) {
            stmt.bindString(21, PickEndTime);
        }
 
        String AreaCheckTime = entity.getAreaCheckTime();
        if (AreaCheckTime != null) {
            stmt.bindString(22, AreaCheckTime);
        }
 
        String ShelfAreaCategoryName = entity.getShelfAreaCategoryName();
        if (ShelfAreaCategoryName != null) {
            stmt.bindString(23, ShelfAreaCategoryName);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ProductEntity readEntity(Cursor cursor, int offset) {
        ProductEntity entity = new ProductEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // OrderId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ProductId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ProductName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ShelfAreaID
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ShelfAreaName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // BarCode
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // SKU
            cursor.getDouble(offset + 8), // SaleQty
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // SaleUnit
            cursor.getDouble(offset + 10), // SalePrice
            cursor.getInt(offset + 11), // IsGift
            cursor.getDouble(offset + 12), // SalePackingQty
            cursor.getInt(offset + 13), // PickUserId
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // PickUserName
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // Remark
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // ShelfCode
            cursor.getShort(offset + 17) != 0, // isChecked
            cursor.getDouble(offset + 18), // pickedQty
            cursor.getDouble(offset + 19), // PreQty
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // PickEndTime
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // AreaCheckTime
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22) // ShelfAreaCategoryName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ProductEntity entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setOrderId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProductId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProductName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setShelfAreaID(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setShelfAreaName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBarCode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSKU(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSaleQty(cursor.getDouble(offset + 8));
        entity.setSaleUnit(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSalePrice(cursor.getDouble(offset + 10));
        entity.setIsGift(cursor.getInt(offset + 11));
        entity.setSalePackingQty(cursor.getDouble(offset + 12));
        entity.setPickUserId(cursor.getInt(offset + 13));
        entity.setPickUserName(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setRemark(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setShelfCode(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setIsChecked(cursor.getShort(offset + 17) != 0);
        entity.setPickedQty(cursor.getDouble(offset + 18));
        entity.setPreQty(cursor.getDouble(offset + 19));
        entity.setPickEndTime(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setAreaCheckTime(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setShelfAreaCategoryName(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ProductEntity entity, long rowId) {
        return entity.getID();
    }
    
    @Override
    public String getKey(ProductEntity entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ProductEntity entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
